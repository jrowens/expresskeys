
_NOTABUG_

Any program built with the Qt3 toolkit (like eg the KDE desktop...)
completely swallows the 'stylus' DeviceButtonPress event that we've
registered to be notified of, through the Xlib XSelectExtensionEvent
call. The same event coming from the 'pad' device is all OK, though.

This is a (deliberate?) Qt pattern where only other Qt programs,
with difficulty, can get deliverance of these low-level events. At
least that's my impression after a first round of bug-report emails
between here and there --> Qt producer company Trolltech.

Why they let 'pad' button events pass through is probably due to lack
of knowledge. They recognize an oldtimer like the 'stylus', so BAM,
grab it. But this strange 'pad' thing... better stay out of contact...

Programs based on the GTK+ toolkit like the Gnome desktop (with the
notable exception being the Gimp canvas - more about that below) do
behave appropriate vis-a-vis both the 'stylus' and 'pad' button events.

This situation has led to one design compromise (performance slippage)
in expresskeys 0.3.0, and a not wholly ideal usability pattern when
dealing with Qt3 programs.

Performance wise we take a hit by also registering for and acting on
a 'stylus' ProximityIn event. These events are not blocked by Qt3.

Execution of the "automatic change of stylus pressure sensitivity"
in a Qt3 program is achieved by first lifting the pen slightly (until
it goes out of proximity - the cursor stops being effected by pen
movement) and then lowering the pen again on the target window.

If we happen to be in Gnome, it is enough to touch the Qt3 program on
the titlebar or on its other borders (since they are GTK+ derived).

GTK+ based programs suffer no such limitation. In those we just press
the pen tip in the window, and by that action the pressure sensitivity
change is performed. Unless the target is the Gimp canvas (at least as
high as version 2.2.10)...

The Gimp canvas is even _more_ broken (in regards to our expectations)
than the Qt3 programs. Here both the 'stylus' DeviceButtonPress AND
the ProximityIn events are filtered away from interested parties.

So in order to get the automatic change of stylus pressure sensitivity
when coming in from another program window, the pen tip or side button
rocker first must engage _somwhere else_ than the canvas. Just touching
the Gimp titlebar or touching an area outside of the canvas will work.

If we happen to be in KDE while using Gimp, then a simple titlebar
touch won't work (all the borders are Qt3 derived). Here we must do the
proximity out/in trick on a part not being the canvas, or touch
somewhere else than the window borders/Gimp canvas.

Phew. But there's a mitigating factor to all this Qt3/Gimp canvas
mess. We can use the "non-trigger" to our advantage.

For example, I normally like the PressCurve to be "0 25 75 100"
(sensitivity 3) in Gimp. But sometimes I'd like it to be a bit firmer.
So if the root window (the "background" in X) or some other window
nearby is set to sensitivity 4, it is a quick touch operation away to
either stay with a level 3, or switch to a level 4 while painting.

_Known bugs marked with FIXME in the code_

! Parsing of the configuration file still leaves some corner cases
to chance.

It doesn't handle situations where multiple fields are specified
on the same line. Possibly other cases, see the FIXME markers.

! The exit_on_error function drops the EXIT_KO when callig
clean_up_exit. It becomes a normal EXIT_OK signal for any controlling
parent.

! Should check that only valid keycodes (and our fake ones) are used
in a program definition. It is only partially fixed by filtering out
anything below the keycode 9 [Esc]. Should ignore erroneous spaces in
the class name field.

_Possible bugs, unmarked_

! In eg Gimp, if expresskeys is started with the option to handle a pen,
my core pointer (an USB mouse) and the Wacom puck do not draw through
button 1 or react to mouse button 2 and 3 presses until the Wacom stylus
has come into proximity for the first time. After the first proximity,
the mouse and puck react normally. Strange...

! If the expresskeys program is started before any usage of the
X program "xmodmap" in eg .xinitrc, it can crash with the message:

X Error of failed request:  BadWindow (invalid Window parameter)
  Major opcode of failed request:  15 (X_QueryTree)
  Resource id in failed request:  0x1
  Serial number of failed request:  20
  Current serial number in output stream:  20

Reason, totally unknown...

_Known bugs, unmarked_

! Pressing a pad button with one program window in focus, moving the
focus to another program window and then releasing the button, leaves
the first program in a confused mind regarding the keyboard state.
Returning the focus and pressing the button again (or another that
has an effect) restores the sanity.

