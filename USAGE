///////////////////////////////////////////////////////////////////////////

Important: If you use the linuxwacom-0.6.7-beta or in the future
released versions you must change the pad statement in X config
file to:

Section "ServerLayout"
[...]
InputDevice "pad" # Intuos3 or Cintiq 21UX. It must NOT send core event
[...]
EndSection

See: http://linuxwacom.sourceforge.net/index.php/howto/srvlayout

If you use the old pad statement, any pad button press can jump the
mouse cursor to the upper left corner (0,0) when another tool isn't
in proximity.

///////////////////////////////////////////////////////////////////////////

USAGE of expresskeys:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* Program can not be started unless X is running, and refuses to start
if another active instance of the program is detected (through a live
pid-file).

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* Command line can be:

expresskeys <pad-device-name> [<pen-device-name>] [-d] [-v]

Where the pad name is mandatory. Specify a pen name
if you want the program to handle pen mode switches.
Use -d to make the program a daemon (run in the background).
Use -v to print info to the screen at many execution points.

Example: expresskeys pad stylus -d

The names are the "Identifier" strings in your X config file (xorg.conf)
Myself I start expresskeys just before the window manager in my 
.xinitrc with: /usr/local/bin/expresskeys pad stylus -d

OBS! I just found out that it should be started AFTER any usage of
the X program "xmodmap", else expresskeys could crash. Reason unknown.
See the BUGS file for further info.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* A minimal configuration file is written on first run to the user home
directory: ~/.expresskeys/expresskeys.conf

It contains "default", "Gimp", "Blender" and "XTerm" entries and is
recreated whenever a configuration file is missing on program start.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* A file with the program PID number is written if run with -d in:
~/.expresskeys/expresskeys.pid

The pid-file is deleted on normal program exit like "kill <pid>",
"killall expresskeys", "kill -TERM <pid>" etc. A brutal "kill -9 <pid>"
or a program crash will leave the pid-file undeleted. This is also
the case if the program is terminated by X close-down on some systems.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* The configuration file is re-read upon receipt of the signal SIGUSR1.
Do a "kill -USR1 <pid-of-expresskeys>" after a config file edit (or -USR2).
The included shell script "expresskeys-reread.sh" will do it for you if
a pid-file from a daemon instance is present.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* Use the X program "xev" to find keycodes when changing the configuration.

Since I've received a request for an explanation, I'll quote the reply:

--Begin Letter--

> I'm using your expresskeys for my intous3 but I'm
> a linux newbie and now I'm a bit confused, what is
> the right keycode or config for the arrow key.
>
> I want Space on 12
> Left arrow on 9
> Right arrow on 10

Keycodes are both confusing and simple, at the same time ;-) They are
different depending on your language and keyboard design, and also
different if you are in X or not, but share some common details.

To find how they are organized on your own keyboard, you must use a
program. First (if you are in X as you should be) open a terminal. The
only one I have per default is "xterm" since I don't use gnome or kde or
anything like that, where a terminal window can be called just
"terminal"... Other standalone terminals are "aterm", "rxvt", "eterm"
etc.

Now start a program from within the open terminal. One that _must_ be
present on your system (I think) is "xev". It comes as standard with X.
When you start xev it spawns another window (small white square) and
spits out a lot of info in the terminal window. You must move the mouse
pointer to the square window before doing any key presses.

Ok, now I'll press Space, Left Arrow and Right Arrow:

KeyPress event, serial 27, synthetic NO, window 0x1200001,
    root 0x115, subw 0x0, time 5261195, (128,125), root:(138,145),
    state 0x0, keycode 65 (keysym 0x20, space), same_screen YES,
    XLookupString gives 1 bytes: (20) " "
    XmbLookupString gives 1 bytes: (20) " "
    XFilterEvent returns: False

The important information here is the "keycode 65 (keysym 0x20, space)".
There will be another information dump when you release the space key,
called KeyRelease.

So on my Swedish keyboard, X uses the keycode 65 to represent the
spacebar. Ok, here's Left Arrow:

KeyPress event, serial 27, synthetic NO, window 0x1200001,
    root 0x115, subw 0x0, time 5281166, (128,125), root:(138,145),
    state 0x0, keycode 100 (keysym 0xff51, Left), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

Keycode is 100 here. Let's go to Right Arrow:

KeyPress event, serial 27, synthetic NO, window 0x1200001,
    root 0x115, subw 0x0, time 5283438, (128,125), root:(138,145),
    state 0x0, keycode 102 (keysym 0xff53, Right), same_screen YES,
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

So it's 102. When you are finished looking for the keycodes, give the
terminal window focus (place the mouse cursor there or whatever) and
press Ctrl-c (you can also click on the close button of the white square
window).

That's how it looks on this Swedish keyboard. Now open the expresskeys
configuration file with any editor. The location is a hidden directory
in your home directory. Here's mine:

/home/loke/.expresskeys/expresskeys.conf

Replace the keycodes in the section you are interested in, I'd do:

10 Left Pad - Button 9:         100     # Button 9 Left Arrow
11 Left Pad - Button 9 Plus:    0       # Extra key

12 Left Pad - Button 10:        102     # Button 10 Right Arrow
13 Left Pad - Button 10 Plus:   0       # Extra key

14 Left Pad - Button 11:        37      # Button 11
15 Left Pad - Button 11 Plus:   0       # Extra key

16 Left Pad - Button 12:        65      # Button 12 Space (was default)
17 Left Pad - Button 12 Plus:   0       # Extra key

Save the file and read in the new values with the shell script I
supplied (expresskeys-reread.sh)

The extra key are for when you want two keys pressed. First the normal,
then the extra, like Ctrl-s or so. I've been informed that a US keyboard
doesn't have a single + key, it's shifted on their = key. So they must
use Shift-= in the expresskeys gimp section to zoom in, thereby wasting
the extra key. A workaround is to configure gimp itself to zoom by the =
key instead of +.

--End Letter--

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* Use the X program "xprop" to find the name string to use when changing
the configuration. xprop without any arguments expects you to then click
on the target window. We are looking for the WM_CLASS info so running:

$ xprop | grep WM_CLASS
WM_CLASS(STRING) = "VCLSalFrame", "OpenOffice.org 1.1.4"

It's the last string we would use, the "OpenOffice.org 1.1.4". We always
use the last part, and the spelling is case sensitive. Putting
"openoffice.org 1.1.4" in the configuration file would not match up.

Also, since spaces are accepted as part of a class name, make sure there
are no space _before or after_ the name, within the double quotes:

"A ProgramName" <-- OK
" A ProgramName" or "A ProgramName " <-- NOT-OK

The extra space/s would become part of the class name. Not what you want.

The very first entry (at the top) in the configuration file is named
"default" and holds a key definition for all programs not specified
in another entry. It also takes care of the root window (the "background")
and programs lacking a class name in their WM_CLASS.

"default" must always stay as the first entry in the configuration file!

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The "default" entry holds keycodes to make the pad buttons behave just
as Wacom list them in the Quick Start Guide: Shift, Alt, Ctrl and Space
mirrored on both sides. Touch Strip support is turned off by default. Use
the number 1 in the "Handle Touch Strips" field to turn it on. You then get
Arrow-key Up/Down on the left strip and Arrow-key Right/Left on the right.
Change direction of the movement by switching the "Up" and "Down" values.

Both pad buttons and touch strips can send two keys at a time if so
configured through usage of the "Plus" keycode fields.

If you want a button to do a mouse button press instead of a keypress,
use a value between 991 and 997 in the corresponding keycode field, where
991 represents mouse button 1, 992 button 2, and so on. Only existing mouse
buttons, defined through the driver of the active core pointer, can be
simulated. If buttons 4 and 5 are available they normally control vertical
scrolling, like the mouse's scroll wheel (button 4 scrolls up, button 5
scrolls down.) If buttons 6 and 7 are available they may control horizontal
scrolling (button 6 scrolls left, button 7 scrolls right) or may match
extra buttons on the mouse.

If you want a button to do pen mode toggling between Absolute and Relative,
use the value 999 in the corresponding keycode field. To be able to switch
mode anywhere each program block must contain one 999 definition. And,
of course, a pen name must be used on the command line when starting the
program. OBS: The pen mode toggle can only be assigned to a "real" button,
not the "Plus" version :OBS.

Please don't alter or remove the colons ":" before the class name or
keycodes. They must be there to separate the fields, just like the "%%" is
used to separate and define the program blocks.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The "Gimp" entry has the touch strips turned on by default. The keycodes
used are:
20 = "+" = Gimp Zoom In. Left/Right touch strip up motion
61 = "-" = Gimp Zoom Out. Left/Right touch strip down motion.

The "Blender" entry is a private choice for the 3D program blender...

I felt, and feel, that an "XTerm" is too important a window to have _any_
interference from the pad. But observe that I want to be able to switch
pen mode even with such a window in focus, so I've set 999 in one field.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Below is some ASCII art showing the "default":

Left ExpressKey Pad
------------ 
|  |   |   |		Wacom Intuos3 defaults are:
|  | 9 | T |
|11|---| O |		Key 9  = (left) Shift	= keycode 50
|  |10 | U |		Key 10 = (left) Alt	= keycode 64
|------| C |		Key 11 = (left) Control	= keycode 37
|  12  | H |		Key 12 = Space		= keycode 65
------------

Right ExpressKey Pad
------------ 
|   |   |  |		Wacom Intuos3 defaults are:
| T |13 |  |
| O |---|15|		Key 13 = (left) Shift	= keycode 50
| U |14 |  |		Key 14 = (left) Alt	= keycode 64
| C |------|		Key 15 = (left) Control	= keycode 37
| H |  16  |		Key 16 = Space		= keycode 65
------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Sometimes desktops or window managers "steal" certain
keypresses/combinations. If you experience that, look for
a way to change the keybindings of your environment.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

