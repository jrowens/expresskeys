
_Version 0.2.6 25 Feb 2006_

* Continuation of the maintenance by future proofing the ./configure phase
of the program compilation. We now examine what is returned from the commands
"pkg-config --variable=libdir x11" and "pkg-config --variable=includedir x11"
which is used to identify a modular X11R7 release. If that fails, we fall
back on a hardcoded /usr/X11R6/lib[64] and /usr/X11R6/include path for the
monolithic X11R6 releases. Failing that... the users can specify their own
paths through the "--with-xlib=" and/or "--with-xinc=" options. ".


_Version 0.2.5 7 Feb 2006_

[Absolutely no new functionality! A pure maintenance release to prevent
trouble. Ticked off a todo-list based on user experiences and their snafus]

* Erased the useless code in the src-expresskeysconf directory. When or
if a graphical utility is written it should have a fresh start.

* Populated the auto-generated Gimp section of the configuration file
with a more complete set of keycodes (a collection which I use myself).
This was done in order to help people's understanding of the fields.

Updated the USAGE file with this Gimp information, close to the bottom,
since there was no easy way to auto-write a description in the configuration
file itself.

* Changed the expresskeys-reread.sh and expresskeys-terminate.sh scripts
in the old-extra directory so they won't use any hardcoded program paths,
except for the #!/bin/sh trigger. I thought that I had used the canonical
paths, but distributions apparently shuffle stuff around willy-nilly.

* Threw in a basic trap/filtering routine in config_read.c which silently
swallows illegal keycodes from the low region - below 9 [Escape] - unless
the program is run in verbose (-v) mode. Then it spits out a "keycode IGNORED"
message when the configuration file is read. Xlib crashes the program when
fed unsavory keycodes, so more work can be done in this area.

* Implemented a ./configure discovery section where a dummy file is
compiled and linked for each of libX11.so libXext.so libXi.so libXtst.so
X11/Xlib.h X11/Xutil.h X11/extensions/XInput.h and X11/extensions/XTest.h
Missing dependencies are thus quickly spotted and a comprehensible error
message delivered. A section dealing with dependencies has also been added
at the end of the INSTALL file.

The discovery section can be ogled in the configure.in file of the
root directory. I almost went mad before nailing a working piece like:

echo $'#include <X11/Xlib.h>\nmain(){}'|$CC -L$XLIBDIR -xc - -o dum 2>/dev/null
if test $? != 0 ; then
   echo "Can not include <X11/Xlib.h> header file!"
   SOMEERROR=1
else
   echo "Xlib.h OK"
fi

So simple looking and yet so hard to produce...

* Included the following text block in the runtime help, the README and
the USAGE file (and now here ;-)

"Please direct any bug reports or questions to the top address in
the AUTHORS file. This program is _not_ a linuxwacom project."

